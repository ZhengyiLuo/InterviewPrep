
/**
 * @Time: Oct 19, 2016
 * @Author: ZhengyiLuo
 */

public class LRUCache {
    E[] map;
    int capacity;
    int size;
    int prev = 0;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new E[capacity];
    }

    public int get(int key) {
        int code = getHashCode(key);
        E element = map[code];
        if (element != null) {
            if (element.key == key) {
                return element.value;
            } else {
                int result = probe(key);
                if (result > 0) {
                    return map[result].value;
                } else {
                    return result;
                }
            }
        }
        return -1;
    }

    public void set(int key, int value) {
        size++;

        if (size == capacity) {
            map[prev] = null;
            size--;
        }
        int position = probe(key);
        if (position == -1) {
            map[prev] = new E(key, value);
        } else {
            return;
        }

    }

    public int getHashCode(int key) {
        return key % capacity;
    }

    public int probe(int key) {
        int code = getHashCode(key);
        boolean found = false;
        for (int i = 0; i < map.length; i++) {
            code++;
            if (code >= map.length) {
                code = 0;
            }
            if (map[code] == null) {
                break;
            }
            if (map[code].key == key) {
                found = true;
                break;
            }
        }

        if (found) {
            return code;
        } else {
            prev = code;
            return -1;
        }
    }

    class E {
        int key;
        int value;

        E(int key, int value) {
            this.key = key;
            this.value = value;
        }

    }
}