import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

/**
 * @Time: Nov 5, 2016
 * @Author: zen
 * 
 *          Given a n x n matrix where each of the rows and columns are sorted
 *          in ascending order, find the kth smallest element in the matrix.
 * 
 *          Note that it is the kth smallest element in the sorted order, not
 *          the kth distinct element.
 */

public class LeetCodeSolu7 {
    public int kthSmallest_mine(int[][] matrix, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(k, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });

        for (int i = 0; i < matrix.length; ++i) {
            for (int j = 0; j < matrix[0].length; ++j) {
                int element = matrix[i][j];
                if (pq.size() < k) {
                    pq.offer(element);
                } else if (pq.peek() > element) {
                    pq.poll();
                    pq.offer(element);
                }

            }

            if (i + 1 < matrix.length && matrix[i][0] > pq.peek()) {
            } else {
                --i;
            }

        }

        return pq.peek();
    }

    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Element> pq = new PriorityQueue<>(k);
        for (int i = 0; i < matrix.length; ++i)
            pq.offer(new Element(0, i, matrix[0][i]));
        for (int i = 0; i < k - 1; ++i) {
            Element e = pq.poll();
            if (e.row == matrix.length - 1) {
                continue;
            }
            pq.add(new Element(e.row + 1, e.col, matrix[e.row + 1][e.col]));

        }

        return pq.peek().val;
    }

    public class Element implements Comparable<Element> {
        int col;
        int row;
        int val;

        public Element(int row, int col, int val) {
            this.col = col;
            this.row = row;
            this.val = val;
        }

        @Override
        public int compareTo(Element o) {
            return this.val - o.val;
        }
    }

    public int[][] reconstructQueue(int[][] people) {
        if (people == null || people.length == 0 || people.length == 1) {
            return people;
        }
        
        Arrays.sort(people, new Comparator<int[]>() {

            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] == o2[0]) {
                    return o1[1] - o2[1];
                }
                return o1[0] - o2[0];
            }
        });
        
        int[][] result = new int[people.length][people[0].length];
        
        int prev = Integer.MIN_VALUE;
        for (int i = 0; i < people.length; i++) {
          put(result, people[i], people[i][1]);
        }
        
        
        

        return null;
    }
    
    void put(int[][] result, int[] elm, int pos){
        for (int i = 0; i < elm.length; i++) {
            
        }
        
        
    }
}
