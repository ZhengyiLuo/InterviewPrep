/**
 * @Time: Sep 18, 2016
 * @Author: ZhengyiLuo
 */

public class main {
    public static void main(String[] args) {
        LRUCache map = new LRUCache(1);
        map.set(1, 1);
        map.set(1, 2);
        System.out.println(map.get(1));
        System.out.println(map.get(2));
        // String line1 = "YNNNN";
        // String line2 = "NYNNN";
        // String line3 = "NNYNN";
        // String line4 = "NNNYN";
        // String line5 = "NNNNY";
        // String[] input = { line1, line2, line3, line4, line5 };
        // System.out.println(TwoSigmaSolu2.friendCircles(input));

        // int[] array = {5,6,8,8,5};
        // int[] array1 = {5,5,5,5,5};
        // System.out.println(Solu3.countMoves(array));

        // Solu solu = new Solu();
        // HashSet<String> set = new HashSet<>();
        // set.add("Leet");
        // set.add("code");
        // set.add("run");
        // set.add("buddy");
        // set.add("cod");
        //
        // System.out.println(solu.wordBreak("Leetcoderunbuddy", set));
        //

        // Scanner sc = new Scanner(System.in);
        // int n = sc.nextInt();
        // for (int i = 0; i < n; i++) {
        // int line_n = sc.nextInt();
        // int[] inputarray = new int[line_n];
        // for (int j = 0; j < line_n; j++) {
        // inputarray[i] = sc.nextInt();
        // }
        // boolean result = solu(inputarray, 0, inputarray.length - 1);
        // if (result) {
        // System.out.println("YES");
        // } else {
        // System.out.println("NO");
        // }
        //
        // }

    }

    // public static boolean solu(int[] inputarray, int start, int end) {
    // int root = inputarray[start];
    // int cursor = start + 1;
    // int leftSubTreeStart ;
    // int leftSubTreeEnd;
    // int rightSubTreeStart;
    // int rightSubTreeEnd;
    //
    // if (cursor <= inputarray.length) {
    // return true;
    // }
    //
    //
    // while (inputarray[cursor] < root) {
    // cursor++;
    // }
    //
    // leftSubTreeEnd = cursor;
    // rightSubTreeStart = leftSubTreeEnd + 1;
    // while (inputarray[cursor] > root) {
    // cursor++;
    // }
    //
    // if (cursor < end) {
    // return false;
    // } else {
    // return solu(inputarray, leftSubTreeStart, leftSubTreeEnd) &&
    // solu(inputarray, rightSubTreeStart, end);
    // }
    //
    // }

}
