import java.util.HashMap;

/**
 * @Time: Oct 19, 2016
 * @Author: ZhengyiLuo
 */

public class LeetCodeSolu5 {
    public RandomListNode copyRandomList1(RandomListNode head) {
        HashMap<RandomListNode, RandomListNode> map = new HashMap<>();
        if (head == null) {
            return null;
        }

        RandomListNode newhead = new RandomListNode(head.label);
        map.put(head, newhead);

        while (head != null) {
            RandomListNode newNode = map.get(head);
            if (!map.containsKey(head.next)) {
                if (head.next != null) {
                    newNode.next = new RandomListNode(head.next.label);
                    map.put(head.next, newNode.next);
                } else {
                    newNode.next = null;
                }
            } else {
                newNode.next = map.get(head.next);
            }

            if (!map.containsKey(head.random)) {
                if (head.random != null) {
                    newNode.random = new RandomListNode(head.random.label);
                    map.put(head.random, newNode.random);
                } else {
                    newNode.random = null;
                }

            } else {
                newNode.random = map.get(head.random);
            }
            head = head.next;
        }
        return newhead;

    }

    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        RandomListNode newhead = head;
        while (head != null) {
            RandomListNode newNode = new RandomListNode(head.label);
            newNode.next = head.next;
            head.next = newNode;
            head = newNode.next;
        }

        head = newhead;
        newhead = newhead.next;
        while (head.next.next != null) {
            System.out.println(head.label);
            if (head.random != null) {
                head.next.random = head.random.next;
            } else {
                head.next.random = null;
            }

            RandomListNode temp2 = head.next.next;
            head.next.next = head.next.next.next;
            head = temp2;

        }
        if (head.random != null) {
            head.next.random = head.random.next;
        } else {
            head.next.random = null;
        }

        return newhead;

    }

    class RandomListNode {
        int label;
        RandomListNode next, random;

        RandomListNode(int x) {
            this.label = x;
        }
    };

    public void moveZeroes(int[] nums) {
        int accu = 0;
        for (int i = 0; i < nums.length; i++) {
            int nudge = 0;
            while (i < nums.length && nums[i] == 0) {
                nudge++;
                i++;
            }

            if (nudge != 0) {
                while (i < nums.length && nums[i] != 0) {
                    nums[i - nudge - accu] = nums[i];
                    nums[i] = 0;
                    i++;
                }
                accu += nudge;
                i--;

            }

        }

    }

    public int uniquePaths(int m, int n) {

        int b = Math.min(m, n) - 1;
        int sum = Math.max(m, n) - 1 + b;
        int up = 1;
        int down = 1;
        System.out.println(1764322560 * 10);
        for (; b > 0; b--, sum--) {

            up *= sum;
            down *= b;
        }
        return up / down;
    }
}
